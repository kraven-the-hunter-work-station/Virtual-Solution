import React, { useState } from 'react';
import { 
  Mail, 
  Phone, 
  MapPin, 
  Send, 
  MessageCircle, 
  CheckCircle, 
  Globe,
  Headphones,
  Star,
  Award,
  Users,
  Shield
} from 'lucide-react';
import { submitContactForm } from '../services/hostinger';
import emailjs from '@emailjs/browser';

// Add Window interface extension for EmailJS
declare global {
  interface Window {
    emailjs: any;
  }
}

export default function ContactPage(): JSX.Element {
  const [formData, setFormData] = useState({
    firstName: '',
    lastName: '',
    email: '',
    company: '',
    service: '',
    budget: '',
    message: ''
  });
  const [isSubmitted, setIsSubmitted] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [submitError, setSubmitError] = useState<string | null>(null);

  // Function to handle form submission to PHP backend
  const sendFormToBackend = async () => {
    try {
      // Submit to the PHP endpoint
      const response = await submitContactForm(formData);
      
      if (response.success) {
        return true;
      } else {
        throw new Error(response.message || 'Failed to send message');
      }
    } catch (error) {
      console.error('Form submission error:', error);
      throw error;
    }
  };

  // Function to send form data via EmailJS
  const sendWithEmailJS = async () => {
    try {
      // Initialize EmailJS if not already initialized
      if (!window.emailjs) {
        await import('@emailjs/browser').then(() => {
          emailjs.init("YOUR_PUBLIC_KEY"); // Replace with your actual public key
        });
      }
      
      // Create a message with all form data
      const fullMessage = "Service: " + formData.service + "\n" +
        "Company: " + (formData.company || 'Not specified') + "\n" +
        "Budget: " + (formData.budget || 'Not specified') + "\n\n" +
        "Message:\n" + formData.message;
      
      // Create data object for EmailJS
      const emailData = {
        from_name: formData.firstName + " " + formData.lastName,
        reply_to: formData.email,
        subject: (formData.service || 'Website') + " Inquiry",
        message: fullMessage,
        to_name: "Virtual Solutions Path"
      };
      
      // Send via EmailJS
      const response = await emailjs.send(
        "YOUR_SERVICE_ID", // Replace with your actual service ID
        "YOUR_TEMPLATE_ID", // Replace with your actual template ID
        emailData
      );
      
      return response.status === 200;
    } catch (error) {
      console.error('EmailJS error:', error);
      return false;
    }
  };
  
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsSubmitting(true);
    setSubmitError(null);

    try {
      console.log('Submitting form to Hostinger PHP backend...');
      
      // Submit to our PHP backend using the hostinger service
      const result = await sendFormToBackend();
      
      if (result) {
        console.log('Form submission successful');
        setIsSubmitted(true);
        setFormData({
          firstName: '',
          lastName: '',
          email: '',
          company: '',
          service: '',
          budget: '',
          message: ''
        });
        setTimeout(() => setIsSubmitted(false), 3000);
        return; // Exit early on success
      } else {
        console.error('Database submission failed:', result);
        // Continue with fallback methods
      }
    } catch (dbError) {
      console.error('Error submitting to database:', dbError);
      // Continue with fallback methods
    }
    
    // If database failed, try EmailJS as first fallback
    console.log('Database submission failed, trying EmailJS as fallback...');
    const emailJSResult = await sendWithEmailJS();
    
    if (emailJSResult) {
      // EmailJS succeeded
      console.log('EmailJS submission successful');
      setIsSubmitted(true);
      setFormData({
        firstName: '',
        lastName: '',
        email: '',
        company: '',
        service: '',
        budget: '',
        message: ''
      });
      setTimeout(() => setIsSubmitted(false), 3000);
      return; // Exit early on success
    }
    
    // If EmailJS failed, try Formspree as a second backup
    console.log('EmailJS failed, trying Formspree as second backup...');
    
    // Create a message with all the form data
    const fullMessage = "Service: " + formData.service + "\n" +
      "Company: " + (formData.company || 'Not specified') + "\n" +
      "Budget: " + (formData.budget || 'Not specified') + "\n\n" +
      "Message:\n" + formData.message;
    
    // Create data object for Formspree submission
    const formDataObj = {
      name: formData.firstName + " " + formData.lastName,
      email: formData.email,
      message: fullMessage,
      _subject: (formData.service || 'Website') + " Inquiry",
      _replyto: formData.email,
      _format: 'plain'
    };
    
    // Send directly to Formspree API
    console.log('Sending to Formspree:', formDataObj);
    let response;
    let responseData;
    
    try {
      response = await fetch('https://formspree.io/f/xwkgdrgy', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        body: JSON.stringify(formDataObj),
      });
      
      // If Formspree fails, try our secure PHP mailer as a last resort
      if (!response.ok) {
        console.log('Formspree failed, trying secure PHP mailer as final fallback...');
        
        const phpMailerData = {
          name: formData.firstName + " " + formData.lastName,
          email: formData.email,
          subject: (formData.service || 'Website') + " Inquiry",
          message: fullMessage
        };
        
        // Try our custom secure PHP mailer script
        const phpResponse = await fetch('/src/config/secure-mailer.php', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(phpMailerData),
        });
        
        if (phpResponse.ok) {
          const phpResult = await phpResponse.json();
          if (phpResult.success) {
            console.log('PHP mailer succeeded');
            setIsSubmitted(true);
            setFormData({
              firstName: '',
              lastName: '',
              email: '',
              company: '',
              service: '',
              budget: '',
              message: ''
            });
            setTimeout(() => setIsSubmitted(false), 3000);
            return;
          }
        }
        
        // If we got here, both EmailJS and Formspree failed
        throw new Error('All email methods failed');
      }

      responseData = await response.json();
      console.log('Form submission response:', responseData);
      
      // FormSpree returns { ok: true } on success, not { success: true }
      if (response.ok && (responseData.ok || responseData.success)) {
        setIsSubmitted(true);
        setFormData({
          firstName: '',
          lastName: '',
          email: '',
          company: '',
          service: '',
          budget: '',
          message: ''
        });
        setTimeout(() => setIsSubmitted(false), 3000);
      } else {
        throw new Error('Form submission failed');
      }
    } catch (error) {
      console.error('Error submitting form:', error);
      setSubmitError('There was an error sending your message. Please try again later.');
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: value
    }));
  };

  return (
    <div className="bg-gray-50">
      <div className="max-w-7xl mx-auto py-16 px-4 sm:px-6 lg:py-24 lg:px-8">
        <div className="max-w-3xl mx-auto text-center mb-16">
          <h2 className="text-3xl font-extrabold text-gray-900 sm:text-4xl">Get in touch</h2>
          <p className="mt-4 text-lg text-gray-500">
            Have a project in mind? Looking to partner or work together? Reach out through the form below.
          </p>
        </div>

        <div className="grid grid-cols-1 gap-x-8 gap-y-12 lg:grid-cols-3">
          {/* Contact Information */}
          <div className="lg:col-span-1">
            <div className="space-y-8">
              <div>
                <h3 className="text-lg font-medium text-gray-900">Contact Information</h3>
                <p className="mt-2 text-base text-gray-500">
                  Our team is ready to help you bring your vision to life.
                </p>
              </div>
              
              <div className="flex items-center space-x-4">
                <Mail className="h-6 w-6 text-blue-500" />
                <span className="text-gray-600">contact@virtualsolutionspath.com</span>
              </div>

              <div className="flex items-center space-x-4">
                <Phone className="h-6 w-6 text-green-500" />
                <span className="text-gray-600">+1 (555) 123-4567</span>
              </div>

              <div className="flex items-center space-x-4">
                <MapPin className="h-6 w-6 text-red-500" />
                <span className="text-gray-600">Charlotte, NC</span>
              </div>

              <div>
                <h3 className="text-lg font-medium text-gray-900 mb-4">Why Choose Us?</h3>
                <div className="space-y-4">
                  <div className="flex items-start space-x-3">
                    <Shield className="h-5 w-5 text-blue-600 mt-1" />
                    <div>
                      <h4 className="text-base font-medium text-gray-800">Secure & Reliable</h4>
                      <p className="text-sm text-gray-500">We prioritize security in every project we deliver.</p>
                    </div>
                  </div>
                  
                  <div className="flex items-start space-x-3">
                    <Award className="h-5 w-5 text-blue-600 mt-1" />
                    <div>
                      <h4 className="text-base font-medium text-gray-800">Quality Focused</h4>
                      <p className="text-sm text-gray-500">We never compromise on the quality of our solutions.</p>
                    </div>
                  </div>
                  
                  <div className="flex items-start space-x-3">
                    <Users className="h-5 w-5 text-blue-600 mt-1" />
                    <div>
                      <h4 className="text-base font-medium text-gray-800">Client Centered</h4>
                      <p className="text-sm text-gray-500">Your success is our primary objective.</p>
                    </div>
                  </div>
                  
                  <div className="flex items-start space-x-3">
                    <Star className="h-5 w-5 text-blue-600 mt-1" />
                    <div>
                      <h4 className="text-base font-medium text-gray-800">5-Star Service</h4>
                      <p className="text-sm text-gray-500">Consistently rated highly by our clients.</p>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* Contact Form */}
          <div className="lg:col-span-2">
            <form onSubmit={handleSubmit} className="bg-white shadow-lg rounded-lg p-8">
              <div className="grid grid-cols-1 gap-y-6 sm:grid-cols-2 sm:gap-x-8">
                {/* First Name */}
                <div>
                  <label htmlFor="firstName" className="block text-sm font-medium text-gray-700">
                    First name
                  </label>
                  <div className="mt-1">
                    <input
                      type="text"
                      name="firstName"
                      id="firstName"
                      required
                      value={formData.firstName}
                      onChange={handleInputChange}
                      className="py-3 px-4 block w-full shadow-sm focus:ring-blue-500 focus:border-blue-500 border-gray-300 rounded-md"
                    />
                  </div>
                </div>

                {/* Last Name */}
                <div>
                  <label htmlFor="lastName" className="block text-sm font-medium text-gray-700">
                    Last name
                  </label>
                  <div className="mt-1">
                    <input
                      type="text"
                      name="lastName"
                      id="lastName"
                      required
                      value={formData.lastName}
                      onChange={handleInputChange}
                      className="py-3 px-4 block w-full shadow-sm focus:ring-blue-500 focus:border-blue-500 border-gray-300 rounded-md"
                    />
                  </div>
                </div>

                {/* Email */}
                <div className="sm:col-span-2">
                  <label htmlFor="email" className="block text-sm font-medium text-gray-700">
                    Email
                  </label>
                  <div className="mt-1">
                    <input
                      id="email"
                      name="email"
                      type="email"
                      required
                      value={formData.email}
                      onChange={handleInputChange}
                      className="py-3 px-4 block w-full shadow-sm focus:ring-blue-500 focus:border-blue-500 border-gray-300 rounded-md"
                    />
                  </div>
                </div>

                {/* Company */}
                <div className="sm:col-span-2">
                  <label htmlFor="company" className="block text-sm font-medium text-gray-700">
                    Company (optional)
                  </label>
                  <div className="mt-1">
                    <input
                      type="text"
                      name="company"
                      id="company"
                      value={formData.company}
                      onChange={handleInputChange}
                      className="py-3 px-4 block w-full shadow-sm focus:ring-blue-500 focus:border-blue-500 border-gray-300 rounded-md"
                    />
                  </div>
                </div>

                {/* Service Needed */}
                <div>
                  <label htmlFor="service" className="block text-sm font-medium text-gray-700">
                    Service Needed
                  </label>
                  <select
                    id="service"
                    name="service"
                    value={formData.service}
                    onChange={handleInputChange}
                    className="mt-1 py-3 px-4 block w-full shadow-sm focus:ring-blue-500 focus:border-blue-500 border-gray-300 rounded-md"
                  >
                    <option value="">Select a service</option>
                    <option value="Web Development">Web Development</option>
                    <option value="Mobile App">Mobile App</option>
                    <option value="Custom Software">Custom Software</option>
                    <option value="UX/UI Design">UX/UI Design</option>
                    <option value="E-commerce">E-commerce</option>
                    <option value="Consulting">Consulting</option>
                    <option value="Other">Other</option>
                  </select>
                </div>

                {/* Budget Range */}
                <div>
                  <label htmlFor="budget" className="block text-sm font-medium text-gray-700">
                    Budget Range (optional)
                  </label>
                  <select
                    id="budget"
                    name="budget"
                    value={formData.budget}
                    onChange={handleInputChange}
                    className="mt-1 py-3 px-4 block w-full shadow-sm focus:ring-blue-500 focus:border-blue-500 border-gray-300 rounded-md"
                  >
                    <option value="">Select budget range</option>
                    <option value="Under $5,000">Under $5,000</option>
                    <option value="$5,000 - $10,000">$5,000 - $10,000</option>
                    <option value="$10,000 - $25,000">$10,000 - $25,000</option>
                    <option value="$25,000 - $50,000">$25,000 - $50,000</option>
                    <option value="$50,000+">$50,000+</option>
                    <option value="Not sure yet">Not sure yet</option>
                  </select>
                </div>

                {/* Message */}
                <div className="sm:col-span-2">
                  <label htmlFor="message" className="block text-sm font-medium text-gray-700">
                    Message
                  </label>
                  <div className="mt-1">
                    <textarea
                      id="message"
                      name="message"
                      rows={5}
                      required
                      value={formData.message}
                      onChange={handleInputChange}
                      className="py-3 px-4 block w-full shadow-sm focus:ring-blue-500 focus:border-blue-500 border-gray-300 rounded-md"
                    ></textarea>
                  </div>
                </div>

                {/* Submit Button */}
                <div className="sm:col-span-2">
                  <button
                    type="submit"
                    disabled={isSubmitting}
                    className={`w-full inline-flex items-center justify-center px-6 py-3 border border-transparent rounded-md shadow-sm text-base font-medium text-white ${
                      isSubmitting ? 'bg-gray-400' : 'bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500'
                    }`}
                  >
                    {isSubmitting ? (
                      <>
                        <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                          <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                          <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                        </svg>
                        Sending...
                      </>
                    ) : (
                      <>
                        <Send className="mr-2 h-5 w-5" />
                        Send Message
                      </>
                    )}
                  </button>

                  {/* Success Message */}
                  {isSubmitted && (
                    <div className="mt-4 flex items-center bg-green-50 p-4 rounded-md">
                      <CheckCircle className="h-5 w-5 text-green-500 mr-2" />
                      <span className="text-green-800">Your message has been sent successfully! We'll be in touch soon.</span>
                    </div>
                  )}

                  {/* Error Message */}
                  {submitError && (
                    <div className="mt-4 flex items-center bg-red-50 p-4 rounded-md">
                      <svg className="h-5 w-5 text-red-500 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                      </svg>
                      <span className="text-red-800">{submitError}</span>
                    </div>
                  )}
                </div>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>
  );
}
