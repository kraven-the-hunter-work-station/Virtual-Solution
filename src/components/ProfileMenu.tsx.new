import { useState, useEffect, useRef } from 'react';
import { User as UserIcon, LogOut, Settings, ShoppingCart, ChevronDown } from 'lucide-react';

interface User {
  id: number;
  first_name: string;
  last_name: string;
  email: string;
  profile_image?: string;
  role?: string;
}

interface ProfileMenuProps {
  user: User | null;
  onSignOut: () => void;
}

/**
 * ProfileMenu component - Shows user profile image with dropdown menu after sign in
 * Contains options like settings, user purchases, cart, and sign out
 */
const ProfileMenu = ({ user, onSignOut }: ProfileMenuProps) => {
  const [isOpen, setIsOpen] = useState(false);
  const [cartCount, setCartCount] = useState(0);
  const menuRef = useRef<HTMLDivElement>(null);

  // Default profile image if user doesn't have one
  const defaultProfileImage = `https://ui-avatars.com/api/?name=${user?.first_name}+${user?.last_name}&background=8B5CF6&color=fff`;
  
  // Toggle dropdown menu
  const toggleMenu = () => setIsOpen(!isOpen);

  // Handle click outside to close menu
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (menuRef.current && !menuRef.current.contains(event.target as Node)) {
        setIsOpen(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  // Handle escape key
  useEffect(() => {
    const handleEscape = (event: KeyboardEvent) => {
      if (event.key === 'Escape') {
        setIsOpen(false);
      }
    };

    document.addEventListener('keydown', handleEscape);
    return () => document.removeEventListener('keydown', handleEscape);
  }, []);

  // Get cart count on component mount
  useEffect(() => {
    if (user && user.id) {
      // Fetch cart count (example implementation)
      fetch('/api/cart/count')
        .then(res => res.json())
        .then(data => setCartCount(data.count))
        .catch(err => console.error('Error fetching cart count:', err));
    }
  }, [user]);

  if (!user) return null;

  return (
    <div className="relative" ref={menuRef}>
      {/* Profile Button */}
      <button
        onClick={toggleMenu}
        className={`flex items-center justify-center p-2 rounded-xl overflow-hidden transition-all duration-300 border-2 ${
          isOpen
            ? 'border-purple-500/70 shadow-md shadow-purple-500/30 bg-purple-600/20'
            : 'border-purple-500/30 hover:border-purple-500/50 hover:bg-purple-600/10'
        }`}
      >
        <div className="w-8 h-8 rounded-lg overflow-hidden">
          <img
            src={user.profile_image || defaultProfileImage}
            alt={user.first_name}
            className="w-full h-full object-cover"
          />
        </div>
        <span className="text-sm text-gray-200 ml-2 hidden sm:block">
          {user.first_name}
        </span>
        <ChevronDown className="w-4 h-4 ml-2 text-gray-400" />
        {cartCount > 0 && (
          <div className="absolute -top-1 -right-1 w-5 h-5 bg-red-500 rounded-full flex items-center justify-center">
            <span className="text-white text-xs">{cartCount}</span>
          </div>
        )}
      </button>

      {/* Profile Dropdown */}
      {isOpen && (
        <div className="absolute right-0 mt-2 w-72 py-2 bg-gradient-to-br from-black/95 via-gray-900/95 to-black/95 backdrop-blur-2xl border border-gray-600/30 rounded-2xl overflow-hidden shadow-2xl shadow-purple-500/20 z-50 animate-fadeIn">
          {/* User Info Section */}
          <div className="p-4 border-b border-gray-700/50">
            <div className="flex items-center gap-3">
              <div className="w-12 h-12 rounded-xl overflow-hidden border-2 border-purple-500/50">
                <img
                  src={user.profile_image || defaultProfileImage}
                  alt={user.first_name}
                  className="w-full h-full object-cover"
                />
              </div>
              <div>
                <h3 className="text-white font-semibold">
                  {user.first_name} {user.last_name}
                </h3>
                <p className="text-gray-400 text-sm">{user.email}</p>
                <div className="flex items-center mt-1">
                  <div className="h-1.5 w-1.5 rounded-full bg-green-400 mr-1.5 animate-pulse"></div>
                  <span className="text-green-400 text-xs font-medium">Online</span>
                </div>
              </div>
            </div>
          </div>

          {/* Menu Items */}
          <div className="p-2 space-y-1">
            <button
              onClick={() => {
                setIsOpen(false);
                // Handle profile click
              }}
              className="w-full flex items-center gap-3 px-3 py-2.5 rounded-lg text-gray-300 hover:text-white hover:bg-purple-600/20 transition-all duration-300 text-sm text-left"
            >
              <UserIcon className="w-4 h-4" />
              <span>View Profile</span>
            </button>
            
            <button
              onClick={() => {
                setIsOpen(false);
                // Handle settings click
              }}
              className="w-full flex items-center gap-3 px-3 py-2.5 rounded-lg text-gray-300 hover:text-white hover:bg-purple-600/20 transition-all duration-300 text-sm text-left"
            >
              <Settings className="w-4 h-4" />
              <span>Settings</span>
            </button>
            
            {cartCount > 0 && (
              <button
                onClick={() => {
                  setIsOpen(false);
                  // Handle cart click
                }}
                className="w-full flex items-center gap-3 px-3 py-2.5 rounded-lg text-gray-300 hover:text-white hover:bg-purple-600/20 transition-all duration-300 text-sm text-left"
              >
                <div className="relative">
                  <ShoppingCart className="w-4 h-4" />
                  <span className="absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full w-4 h-4 flex items-center justify-center">
                    {cartCount}
                  </span>
                </div>
                <span>Cart</span>
              </button>
            )}
            
            <button
              onClick={() => {
                setIsOpen(false);
                onSignOut();
              }}
              className="w-full flex items-center gap-3 px-3 py-2.5 rounded-lg text-red-400 hover:text-red-300 hover:bg-red-600/20 transition-all duration-300 text-sm text-left"
            >
              <LogOut className="w-4 h-4" />
              <span>Sign Out</span>
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default ProfileMenu;
